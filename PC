local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

-- Whitelist of allowed UserIds (using dictionary for O(1) lookups)
local Whitelist = {
    [2744508863] = true,
    [987654321] = true,
    -- Add more UserIds as needed
}

-- Check if player is whitelisted
local function isWhitelisted(userId)
    return Whitelist[userId] or false
end

-- Exit if player is not whitelisted
if not isWhitelisted(LocalPlayer.UserId) then
    LocalPlayer:Kick("You are not authorized to use this script.")
    return
end

-- Create UI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.CoreGui
ScreenGui.ResetOnSpawn = false -- Prevent UI from resetting on respawn

local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 300, 0, 240)
MainFrame.Position = UDim2.new(0.5, -150, 0.5, -120)
MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
MainFrame.BorderSizePixel = 0
MainFrame.Visible = false
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Parent = ScreenGui

local UICorner = Instance.new("UICorner", MainFrame)
UICorner.CornerRadius = UDim.new(0, 10)

local Title = Instance.new("TextLabel")
Title.Text = "KJ's Hitbox"
Title.Size = UDim2.new(1, 0, 0, 30)
Title.BackgroundTransparency = 1
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.GothamBold
Title.TextSize = 18
Title.Parent = MainFrame

-- Notification
local Notification = Instance.new("TextLabel", MainFrame)
Notification.Text = "made by KJ"
Notification.Size = UDim2.new(1, 0, 0, 20)
Notification.Position = UDim2.new(0, 0, 1, -20)
Notification.BackgroundTransparency = 1
Notification.TextColor3 = Color3.fromRGB(100, 100, 100)
Notification.Font = Enum.Font.Gotham
Notification.TextSize = 14
Notification.Visible = false

-- Transparency Slider
local TransparencyLabel = Instance.new("TextLabel", MainFrame)
TransparencyLabel.Text = "Transparency: 0.4"
TransparencyLabel.Position = UDim2.new(0, 10, 0, 70)
TransparencyLabel.Size = UDim2.new(0, 150, 0, 20)
TransparencyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TransparencyLabel.BackgroundTransparency = 1

local TransparencySlider = Instance.new("TextBox", MainFrame)
TransparencySlider.Position = UDim2.new(0, 170, 0, 70)
TransparencySlider.Size = UDim2.new(0, 50, 0, 20)
TransparencySlider.Text = "0.4"
TransparencySlider.TextColor3 = Color3.fromRGB(255, 255, 255)
TransparencySlider.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TransparencySlider.BorderSizePixel = 0

-- Size Slider
local SizeLabel = Instance.new("TextLabel", MainFrame)
SizeLabel.Text = "Size: 2"
SizeLabel.Position = UDim2.new(0, 10, 0, 100)
SizeLabel.Size = UDim2.new(0, 150, 0, 20)
SizeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
SizeLabel.BackgroundTransparency = 1

local SizeSlider = Instance.new("TextBox", MainFrame)
SizeSlider.Position = UDim2.new(0, 170, 0, 100)
SizeSlider.Size = UDim2.new(0, 50, 0, 20)
SizeSlider.Text = "2"
SizeSlider.TextColor3 = Color3.fromRGB(255, 255, 255)
SizeSlider.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
SizeSlider.BorderSizePixel = 0

-- Apply Button
local ApplyButton = Instance.new("TextButton", MainFrame)
ApplyButton.Text = "Submit"
ApplyButton.Size = UDim2.new(0, 280, 0, 30)
ApplyButton.Position = UDim2.new(0, 10, 0, 140)
ApplyButton.BackgroundColor3 = Color3.fromRGB(50, 150, 255)
ApplyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ApplyButton.Font = Enum.Font.GothamBold
ApplyButton.TextSize = 16
ApplyButton.BorderSizePixel = 0

local ApplyCorner = Instance.new("UICorner", ApplyButton)
ApplyCorner.CornerRadius = UDim.new(0, 8)

-- Toggle UI with Left Alt
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.LeftAlt and not gameProcessed then
        MainFrame.Visible = not MainFrame.Visible
        if MainFrame.Visible then
            Notification.Visible = true
            task.delay(2, function() Notification.Visible = false end) -- Use task.delay for better performance
        end
    end
end)

-- Function to Make All Parts Non-Collidable but Maintain Hitbox
local function setAllPartsNonCollidable(character)
    for _, part in ipairs(character:GetChildren()) do
        if part:IsA("BasePart") and part.CanCollide then -- Only change if necessary
            part.CanCollide = false
            part.CanTouch = true
            part.CanQuery = true
        end
    end
end

-- Function to Update Player
local function updatePlayer(player, transparencyValue, sizeValue)
    if player ~= LocalPlayer and player.Character then
        local root = player.Character:FindFirstChild("HumanoidRootPart")
        if root and root:IsA("BasePart") then
            local newSize = Vector3.new(sizeValue, sizeValue, sizeValue)
            if root.Size ~= newSize or root.Transparency ~= transparencyValue then -- Avoid redundant updates
                root.Size = newSize
                root.Transparency = transparencyValue
                root.CanCollide = false
                root.CanTouch = true
                root.CanQuery = true
            end
            setAllPartsNonCollidable(player.Character)
        end
    end
end

-- Function to Update All Players
local function updateAllPlayers()
    local transparencyValue = tonumber(TransparencySlider.Text) or 0.4
    local sizeValue = tonumber(SizeSlider.Text) or 2
    TransparencyLabel.Text = "Transparency: " .. transparencyValue
    SizeLabel.Text = "Size: " .. sizeValue
    for _, player in ipairs(Players:GetPlayers()) do
        updatePlayer(player, transparencyValue, sizeValue)
    end
end

-- Debounce for Apply Button
local isApplying = false
ApplyButton.MouseButton1Click:Connect(function()
    if not isApplying then
        isApplying = true
        updateAllPlayers()
        task.wait(0.1) -- Brief debounce to prevent spam
        isApplying = false
    end
end)

-- Handle Player Join and Respawn
local function onPlayerAdded(player)
    player.CharacterAdded:Connect(function(character)
        task.delay(0.5, function() -- Reduced delay for faster response
            updatePlayer(player, tonumber(TransparencySlider.Text) or 0.4, tonumber(SizeSlider.Text) or 2)
        end)
    end)
end

-- Initialize existing players
for _, player in ipairs(Players:GetPlayers()) do
    onPlayerAdded(player)
end

-- Connect new players
Players.PlayerAdded:Connect(onPlayerAdded)

-- Clean up on player leave
Players.PlayerRemoving:Connect(function(player)
    -- No need to update all players on leave, as itâ€™s handled per player
end)
